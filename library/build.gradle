import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.parse'
version = '1.10.6-SNAPSHOT'

ext {
    projName = 'ParseFacebookUtils-Android'
    projArtifact = 'parsefacebookutils-v4-android'
    projDescription = 'A utility library to authenticate ParseUsers with the Facebook SDK'
    projGitLink = 'https://github.com/ParsePlatform/ParseFacebookUtils-Android'
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1x'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName project.version
    }
}

dependencies {
    compile 'com.parse:parse-android:1.15.8'

    // We need to exclude bolts-android since facebook-android-sdk 4.x.x depends on a version of
    // bolts-android before being split into bolts-tasks and bolts-applinks.
    compile ('com.facebook.android:facebook-android-sdk:4.24.0') {
        exclude module: 'bolts-android'
    }
    // facebook-android-sdk 4.x.x depends on AppLinks inside bolts-android
    compile 'com.parse.bolts:bolts-applinks:1.4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    testCompile 'org.robolectric:robolectric:3.1.1'
    testCompile 'org.robolectric:shadows-support-v4:3.1.1'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    def jarTask = task("jar${name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir

        manifest {
            attributes(
                    "Bundle-Name": 'parsefacebookutils-v4-android',
                    "Bundle-Version": project.version
            )
        }

        exclude '**/R.class'
        exclude '**/R\$*.class'
        exclude '**/Manifest.class'
        exclude '**/Manifest\$*.class'
        exclude '**/BuildConfig.class'

        baseName 'ParseFacebookUtilsV4'
    }

    def javadocTask = task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        options.links("http://boltsframework.github.io/docs/android/")

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/internal/**'
    }

    def javadocJarTask = task("javadocJar${variant.name.capitalize()}", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
        classifier = 'javadoc'
        from javadocTask.destinationDir
    }

    if (name.equals(BuilderConstants.RELEASE)) {
        artifacts.add('archives', jarTask);
        artifacts.add('archives', javadocJarTask);
    }
}

//region Maven

apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('CI_NEXUS_PASSWORD')

def pomConfig = {
  scm {
     connection 'scm:git@github.com:ParsePlatform/ParseFacebookUtils-Android.git'
     developerConnection 'scm:git@github.com:ParsePlatform/ParseFacebookUtils-Android.git'
     url 'https://github.com/ParsePlatform/ParseFacebookUtils-Android'
  }

  licenses {
    license {
      name 'BSD License'
      url 'https://github.com/ParsePlatform/ParseFacebookUtils-Android/blob/master/LICENSE'
      distribution 'repo'
    }
  }

  developers {
     developer {
        id 'parse'
        name 'Parse'
     }
  }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        def basePom = {
            name projName
            artifactId = projArtifact
            packaging 'aar'
            description projDescription
            url projGitLink
        }

        pom.project basePom << pomConfig
    }
}

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

//endregion

//region Code Coverage

apply plugin: 'jacoco'

jacoco {
    toolVersion "0.7.1.201405082137"
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java")
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

//endregion

//region Coveralls

apply plugin: 'com.github.kt3k.coveralls'

coveralls.jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"

//endregion

apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    publications = ["MyPublication"]

    publish = true

    pkg {
        repo = 'maven'
        name = 'ParseFacebookUtils-Android'
        userOrg = 'parse'
        licenses = ['BSD']
        vcsUrl = projGitLink
        version {
            name = project.version
            desc = projDescription
            released = new Date()
            vcsTag = project.version

            // Sonatype username/passwrod must be set for this operation to happen
            mavenCentralSync {
              sync = true
              user = ossrhUsername
              password = ossrhPassword
              close = '1' // release automatically
           }
        }
    }
}

// Create the publication with the pom configuration:
apply plugin: 'maven-publish'

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId group
            artifactId projArtifact
            artifacts = [androidSourcesJar, bundleRelease]
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', projDescription)
                root.appendNode('name', projName)
                root.appendNode('url', projGitLink)
                root.children().last() + pomConfig

                // maven-publish workaround to include dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                     dependencyNode.appendNode('groupId', it.group)
                     dependencyNode.appendNode('artifactId', it.name)
                     dependencyNode.appendNode('version', it.version)
                }

            }
        }
    }
}

// End of Bintray plugin
